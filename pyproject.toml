[project]
name = "findingmodelforge"
version = "0.1.0"
description = "Finding Model Forge application for managing and Open Imaging Finding Models."
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi[standard]>=0.115.0",
    "jinja2>=3.1.4",
    "python-multipart>=0.0.9",
    "httpx>=0.27.0",
    "pydantic-settings>=2.5.2",
    "loguru>=0.7.2",
    "pyjwt[crypto]>=2.10.1",
    "go-task-bin>=3.44.0",
    "motor>=3.6.0",
    "findingmodel>=0.3.1",
]

[dependency-groups]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.7.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
]

[tool.ruff]
line-length = 120
target-version = "py312"
extend-exclude = ["__pycache__", ".venv", "dist", "build", "zOld"]

[tool.ruff.lint]
ignore = [
    "ANN401", # any-type
]
extend-select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ANN", # flake8-annotations
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ANN"]

[tool.mypy]
exclude = ["zOld"]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["motor.*", "pymongo.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=app --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
