# https://taskfile.dev

version: "3"

vars:
  LIBRARY_DIR: packages/findingmodelforge
  API_DIR: packages/fmf-api
  TMP_PACKAGES_DIR: tmp_packages
  API_CONTAINER_NAME: findingmodelforge-api:latest

tasks:
  test_library:
    desc: "Test the findingmodelforge library"
    dir: "{{.LIBRARY_DIR}}"
    cmds:
      # Check if the mongodb container is running; if not, have to use 'pytest -m "not needs_db"'
      - |
        if [ "$OS" = "Windows_NT" ]; then
          powershell.exe -Command "docker ps | Select-String -Pattern 'mongodb' -Quiet; if (\$?) { pytest } else { pytest -m 'not needs_db' }"
        else
          sh -c "docker ps | grep -q mongodb && pytest || pytest -m 'not needs_db'"
        fi
    silent: true

  test_library_with_db:
    desc: "Test the findingmodelforge library with a MongoDB instance"
    deps:
      - start_local_mongo
    dir: "{{.LIBRARY_DIR}}"
    cmds:
      - uv run pytest
    silent: true

  check_library:
    desc: "Check the findingmodelforge library"
    dir: "{{.LIBRARY_DIR}}"
    cmds:
      - echo "Checking library..."
      - uv run ruff format
      - uv run ruff check
      - uv run mypy src
      # Do the test_library task
      - task test_library
    silent: true

  build_library:
    desc: "Build the findingmodelforge library"
    dir: "{{.LIBRARY_DIR}}"
    cmds:
      - echo "Building library..."
      - uv build
    silent: true

  build_library_image:
    desc: "Build the findingmodelforge library container"
    deps:
      - build_library
    dir: "{{.LIBRARY_DIR}}"
    cmds:
      - echo "Building findingmodelforge-files image..."
      - docker build --platform linux/amd64 -t findingmodelforge-files:latest .
    silent: true

  build_api_image:
    desc: "Build the findingmodelforge API container"
    deps:
      - build_library_image
    dir: "{{.API_DIR}}"
    cmds:
      - echo "Building API image..."
      - docker build --platform linux/amd64 -t {{.API_CONTAINER_NAME}} .
    silent: true

  run_api_native:
    desc: "Run the findingmodelforge API natively"
    dir: "{{.API_DIR}}"
    cmds:
      - infisical run --env=dev -- uv run uvicorn app.main:app --log-level info --reload  --host localhost --port 8000
    silent: true
  
  run_api_container:
    desc: "Run the findingmodelforge API in a container"
    dir: "{{.API_DIR}}"
    cmds:
      - echo "Running API container..."
      - |
        if [ "$OS" = "Windows_NT" ]; then
          echo "Don't know how to run containers on Windows yet"
        else
          docker run --name findingmodelforge_api --platform linux/amd64 -d --env-file <(infisical export --format=dotenv) -p 8000:8000 --rm findingmodelforge-api /app/run_app_dev.sh
        fi
    silent: true

  start_local_mongo:
    desc: "Start a local MongoDB instance"
    cmds:
      # Check to see if the mongodb container is already running
      - |
        if [ "$OS" = "Windows_NT" ]; then
          powershell.exe -Command "docker ps | Select-String -Pattern 'mongodb' -Quiet; if (-not \$?) { docker run --name mongodb -p 27017:27017 -d mongo:latest }"
        else
          sh -c "docker ps | grep -q mongodb || docker run --name mongodb -p 27017:27017 -d mongo:latest"
        fi
    silent: true

  stop_local_mongo:
    desc: "Stop the local MongoDB instance"
    cmds:
      - |
        if [ "$OS" = "Windows_NT" ]; then
          powershell.exe -Command "docker stop mongodb"
        else
          sh -c "docker stop mongodb"
        fi
    silent: true
