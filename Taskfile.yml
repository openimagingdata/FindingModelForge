# https://taskfile.dev

version: "3"

vars:
  CONTAINER_NAME: ghcr.io/openimagingdata/findingmodelforge:latest
  DATE_TAG: "{{now | date \"20060102\"}}"

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task -l
    silent: true

  install:
    desc: "Install dependencies and setup environment"
    cmds:
      - echo "📦 Installing Python dependencies..."
      - uv sync --all-extras --dev
      - echo "📦 Installing Node.js dependencies..."
      - npm install
      - echo "✅ Dependencies installed!"
    silent: true

  setup:
    desc: "Setup development environment (install deps + create .env + build assets)"
    cmds:
      - task: install
      - |
        if [ ! -f ".env" ]; then
          echo "📝 Creating .env file from template..."
          cp .env.example .env
          echo "⚠️  Please edit .env file with your GitHub OAuth credentials"
        else
          echo "✅ .env file already exists"
        fi
      - echo "🎨 Building frontend assets..."
      - npm run build
      - echo "✅ Setup complete!"
    silent: true

  # Development tasks
  dev:
    desc: "Start development server"
    cmds:
      - echo "🚀 Starting Finding Model Forge development server..."
      - task: setup
      - echo "🌐 Starting server on http://localhost:8000"
      - uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --proxy-headers --forwarded-allow-ips "*"
    silent: true

  dev-watch:
    desc: "Start development server with CSS watch mode"
    cmds:
      - echo "🚀 Starting Finding Model Forge with CSS watching..."
      - task: setup
      - echo "👀 Starting CSS watch mode in background..."
      - npm run watch:css &
      - echo "🌐 Starting server on http://localhost:8000"
      - echo "💡 CSS changes will auto-rebuild. Press Ctrl+C to stop both processes."
      - uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --proxy-headers --forwarded-allow-ips "*"
    silent: true

  run:
    desc: "Run the app (alias for dev)"
    cmds:
      - task: dev

  # Frontend tasks
  build-css:
    desc: "Build CSS from Tailwind sources"
    cmds:
      - echo "🎨 Building CSS..."
      - npm run build:css
      - echo "✅ CSS build complete!"
    silent: true

  watch-css:
    desc: "Watch and rebuild CSS on changes"
    cmds:
      - echo "👀 Watching CSS for changes..."
      - npm run watch:css
    silent: true

  download-libs:
    desc: "Download JavaScript libraries"
    cmds:
      - echo "📥 Downloading JavaScript libraries..."
      - npm run download:libs
      - echo "✅ Libraries downloaded!"
    silent: true

  build-frontend:
    desc: "Build all frontend assets"
    cmds:
      - echo "🎨 Building frontend assets..."
      - npm run build
      - echo "✅ Frontend build complete!"
    silent: true

  # Code quality tasks
  format:
    desc: "Format code (fixes formatting issues)"
    cmds:
      - echo "🎨 Formatting Finding Model Forge code..."
      - uv run ruff format .
      - echo "✅ Code formatting complete!"
    silent: true

  lint:
    desc: "Lint and fix code issues"
    cmds:
      - echo "🎨 Formatting and linting Finding Model Forge code..."
      - uv run ruff format .
      - echo "🔍 Fixing linting issues..."
      - uv run ruff check --fix .
      - echo "🔎 Running type checking..."
      - uv run mypy .
      - echo "✅ Code formatting and linting complete!"
    silent: true

  check:
    desc: "Run quality checks (read-only, for CI)"
    cmds:
      - echo "🔍 Running Finding Model Forge quality checks..."
      - echo "🔍 Checking linting..."
      - uv run ruff check .
      - echo "🎨 Checking code formatting..."
      - uv run ruff format --check .
      - echo "🔎 Running type checking..."
      - uv run mypy .
      - echo "✅ All quality checks passed!"
    silent: true

  # Testing tasks
  test:
    desc: "Run tests with coverage"
    cmds:
      - echo "🧪 Running Finding Model Forge tests..."
      - echo "📋 Running tests with coverage..."
      - uv run pytest --cov=app --cov-report=term-missing --cov-report=html
      - echo "✅ All tests passed!"
    silent: true

  test-full:
    desc: "Run full test suite with quality checks"
    cmds:
      - task: check
      - task: test
    silent: true

  # Docker tasks
  build-docker-only:
    desc: "Build Docker image (assumes frontend assets already built)"
    cmds:
      - echo "🐳 Building Finding Model Forge Docker image..."
      - docker build -t findingmodelforge:latest -t findingmodelforge:{{.DATE_TAG}} .
      - echo "📊 Image sizes:"
      - docker images findingmodelforge --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
      - echo "✅ Docker build complete!"
    silent: true

  build:
    desc: "Build Docker image with fresh frontend assets"
    cmds:
      - echo "🐳 Building Finding Model Forge Docker image..."
      - echo "🎨 Building frontend assets first..."
      - npm run build
      - task: build-docker-only
    silent: true

  build-check:
    desc: "Build Docker image with frontend asset validation"
    cmds:
      - echo "🔍 Checking for frontend assets..."
      - |
        if [ ! -f "static/css/output.css" ]; then
          echo "❌ Frontend CSS not built. Run 'task build-frontend' first."
          exit 1
        fi
      - |
        if [ ! -f "static/js/alpine.min.js" ]; then
          echo "❌ Frontend JS libraries not downloaded. Run 'task build-frontend' first."
          exit 1
        fi
      - echo "✅ Frontend assets found"
      - task: build-docker-only
    silent: true

  build-prod:
    desc: "Build production Docker image with registry tags"
    cmds:
      - echo "🐳 Building production Docker image..."
      - echo "🎨 Building frontend assets for production..."
      - npm run build
      - docker build --platform linux/amd64 -t {{.CONTAINER_NAME}} -t findingmodelforge:{{.DATE_TAG}} .
      - echo "📊 Image sizes:"
      - sh -c 'docker images --format "table {{`{{.Repository}}`}}\t{{`{{.Tag}}`}}\t{{`{{.Size}}`}}" | grep -E "(REPOSITORY|findingmodelforge|ghcr.io)" | head -6' || echo "No images found"
      - echo "✅ Production build complete!"

  build-ci:
    desc: "Build for CI/production (validates frontend assets exist)"
    cmds:
      - echo "🔍 Checking for required frontend assets..."
      - |
        if [ ! -f "static/css/output.css" ]; then
          echo "❌ Frontend CSS not built. Building now..."
          npm run build:css
        fi
      - |
        if [ ! -f "static/js/alpine.min.js" ]; then
          echo "❌ Frontend JS libraries not downloaded. Downloading now..."
          npm run download:libs
        fi
      - echo "✅ Frontend assets ready"
      - docker build --platform linux/amd64 -t {{.CONTAINER_NAME}} -t findingmodelforge:{{.DATE_TAG}} .
      - echo "📊 Image sizes:"
      - sh -c 'docker images --format "table {{`{{.Repository}}`}}\t{{`{{.Tag}}`}}\t{{`{{.Size}}`}}" | grep -E "(REPOSITORY|findingmodelforge|ghcr.io)" | head -6' || echo "No images found"
      - echo "✅ CI build complete!"

  run-container:
    desc: "Run the app in a Docker container"
    cmds:
      - echo "🐳 Running FindingModelForge container..."
      - docker run --name findingmodelforge --platform linux/amd64 -d --env-file .env -p 8000:8000 --rm findingmodelforge:latest
      - echo "🌐 Container running on http://localhost:8000"
      - echo "💡 Use 'docker logs findingmodelforge' to see logs"
      - echo "💡 Use 'docker stop findingmodelforge' to stop"
      - echo "✅ Container automatically handles proxy headers (X-Forwarded-Proto, etc.)"
    silent: true

  # Utility tasks
  clean:
    desc: "Clean up build artifacts and caches"
    cmds:
      - echo "🧹 Cleaning up Python artifacts..."
      - rm -rf .pytest_cache/ .mypy_cache/ .ruff_cache/ htmlcov/ .coverage
      - echo "🧹 Cleaning up frontend build artifacts..."
      - rm -f static/css/output.css static/js/alpine.min.js static/js/flowbite.min.js static/js/flowbite.min.js.map
      - echo "🧹 Cleaning up Node.js artifacts..."
      - rm -rf node_modules/
      - echo "✅ Cleanup complete!"
    silent: true

  pre-commit:
    desc: "Install and run pre-commit hooks"
    cmds:
      - echo "🔗 Setting up pre-commit..."
      - uv run pre-commit install
      - echo "🔍 Running pre-commit on all files..."
      - uv run pre-commit run --all-files
    silent: true
